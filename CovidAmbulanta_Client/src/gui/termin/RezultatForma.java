/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.termin;

import kontroler.Kontroler;
import domen.Laborant;
import domen.TerminTestiranja;
import domen.Rezultat;
import domen.Pacijent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import model.ModelTabeleRezultat;
import session.Session;

/**
 *
 * @author Milica
 */
public class RezultatForma extends javax.swing.JDialog {

    /**
     * Creates new form FrmGrades
     */
    public RezultatForma(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        pnlResults.setVisible(false);
        setTitle("Unošenje rezultata testiranja");
        popuniFormu();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFilter = new javax.swing.JPanel();
        lblDatum = new javax.swing.JLabel();
        cbTermini = new javax.swing.JComboBox<>();
        btnPrikaziPacijente = new javax.swing.JButton();
        pnlResults = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRezultati = new javax.swing.JTable();
        btnSacuvajRezultate = new javax.swing.JButton();
        lblInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlFilter.setBackground(new java.awt.Color(235, 234, 234));
        pnlFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "  Filter pretrage:  ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 21))); // NOI18N

        lblDatum.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblDatum.setText("Datum termina:");
        lblDatum.setToolTipText("");

        cbTermini.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbTermini.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnPrikaziPacijente.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnPrikaziPacijente.setText("Prikaži pacijente");
        btnPrikaziPacijente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrikaziPacijenteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFilterLayout = new javax.swing.GroupLayout(pnlFilter);
        pnlFilter.setLayout(pnlFilterLayout);
        pnlFilterLayout.setHorizontalGroup(
            pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDatum, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbTermini, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPrikaziPacijente)
                .addContainerGap())
        );
        pnlFilterLayout.setVerticalGroup(
            pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbTermini, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrikaziPacijente))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pnlResults.setBackground(new java.awt.Color(255, 255, 255));
        pnlResults.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Unesite rezultat svakog pacijenta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 15))); // NOI18N

        tblRezultati.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblRezultati.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblRezultati);

        btnSacuvajRezultate.setBackground(new java.awt.Color(204, 204, 204));
        btnSacuvajRezultate.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnSacuvajRezultate.setText("Sačuvaj rezultate");
        btnSacuvajRezultate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajRezultateActionPerformed(evt);
            }
        });

        lblInfo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblInfo.setText("NAPOMENA: Unesite vrednost 0 ako pacijent ima negativan rezultat testa:");

        javax.swing.GroupLayout pnlResultsLayout = new javax.swing.GroupLayout(pnlResults);
        pnlResults.setLayout(pnlResultsLayout);
        pnlResultsLayout.setHorizontalGroup(
            pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlResultsLayout.createSequentialGroup()
                        .addComponent(lblInfo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSacuvajRezultate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlResultsLayout.setVerticalGroup(
            pnlResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResultsLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblInfo)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(btnSacuvajRezultate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlResults, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrikaziPacijenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrikaziPacijenteActionPerformed

        TerminTestiranja termin = (TerminTestiranja) cbTermini.getSelectedItem();
        if (termin != null) {
            try {
                Laborant laborant = Kontroler.getInstance().nadjiLaborante(termin.getLaborant().getLaborantID());
                List<Pacijent> pacijenti = Kontroler.getInstance().filtrirajPacijente(laborant);
                if (pacijenti.size() > 0) {
                    List<Rezultat> rezultati = Kontroler.getInstance().filtrirajRezultate(termin);
                    for (Pacijent p : pacijenti) {
                        Rezultat r = new Rezultat(p, termin);
                        if (!rezultati.contains(r)) {
                            r.setNovi(true);
                            rezultati.add(r);
                        }else{
                            int index = rezultati.indexOf(r);
                            rezultati.get(index).setTerminTestiranja(termin);
                            rezultati.get(index).setPacijent(p);
                        }
                    }
                    spremiTabelu(rezultati);
                    pnlResults.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne može da učita pacijente!");

                }
            } catch (Exception ex) {
                Logger.getLogger(RezultatForma.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Morate izabrati termin za koji unosite rezultate!");
        }


    }//GEN-LAST:event_btnPrikaziPacijenteActionPerformed

    private void btnSacuvajRezultateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajRezultateActionPerformed

        ModelTabeleRezultat model = (ModelTabeleRezultat) tblRezultati.getModel();
        List<Rezultat> rezultati = model.dajSveRezultate();
        //System.out.println(grades.get(0).getExam()+" "+grades.get(0).getpacijent()+" "+grades.get(0).getGrade());

        try {
            List<Rezultat> novi = new ArrayList<>();
            for (int i = 0; i < rezultati.size(); i++) {
                Rezultat r = rezultati.get(i);
                System.out.println("VREDNOST = " + r.getVrednost() + "NOVI = " + r.isNovi());
                if (r.isNovi() && r.getVrednost() != -1) {
                    if (r.getVrednost() < 0 || r.getVrednost() > 100) {
                    JOptionPane.showMessageDialog(this, "Niste uneli validne rezultate! Rezultati mogu biti od 0 do 100 poena.");
                    return;
                    }
                    novi.add(r);
                }
                
            }
            System.out.println(novi.size() + " LISTA NOVI");
            System.out.println(rezultati.size() + " LISTA REZULTATI");
            Kontroler.getInstance().sacuvajSveVrednosti(novi);
            JOptionPane.showMessageDialog(this, "Rezultati testiranja su uspešno uneti!");

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti podatke o rezultatima testiranja pacijenata! Vec ste uneli rezultate za ovaj termin!");
        }
        this.dispose();
        this.setVisible(false);

    }//GEN-LAST:event_btnSacuvajRezultateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPrikaziPacijente;
    private javax.swing.JButton btnSacuvajRezultate;
    private javax.swing.JComboBox<Object> cbTermini;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDatum;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JPanel pnlFilter;
    private javax.swing.JPanel pnlResults;
    private javax.swing.JTable tblRezultati;
    // End of variables declaration//GEN-END:variables

    private void popuniFormu() {
        popuniKomboTermini();
    }

    private void popuniKomboTermini() {
        cbTermini.removeAllItems();
        try {
            List<TerminTestiranja> termini = Kontroler.getInstance().dajSveTermineTestiranja();
            for (TerminTestiranja t : termini) {
                cbTermini.addItem(t);
            }
        } catch (Exception ex) {
            Logger.getLogger(RezultatForma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void spremiTabelu(List<Rezultat> rezultati) {
        TableModel model = new ModelTabeleRezultat(rezultati);
        tblRezultati.setModel(model);

        //tblpacijent.getColumnModel().removeColumn(tblpacijent.getColumnModel().getColumn(1));
    }
}
