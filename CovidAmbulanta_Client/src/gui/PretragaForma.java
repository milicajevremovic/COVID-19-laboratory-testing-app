/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import kontroler.Kontroler;
import domen.Laborant;
import domen.Test;
import domen.Pacijent;
import gui.laborant.LaborantForma;
import gui.pacijent.PacijentForma;
import java.awt.Dimension;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.ModelTabeleLaborant;
import model.ModelTabeleTest;
import model.ModelTabelePacijent;

/**
 *
 * @author Milica
 */
public class PretragaForma extends javax.swing.JDialog {

    private ModPretraga mod;

    /**
     * Creates new form Search
     */
    public PretragaForma(java.awt.Frame parent, boolean modal, ModPretraga mod) {
        super(parent, modal);
        initComponents();

        urediFormu(mod);
        this.mod = mod;
        setLocationRelativeTo(parent);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlBack = new javax.swing.JPanel();
        lblLaborant = new javax.swing.JLabel();
        lblPacijent = new javax.swing.JLabel();
        lblInformacije = new javax.swing.JLabel();
        txtLaborant = new javax.swing.JTextField();
        txtPacijent = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRezultatiPretrage = new javax.swing.JTable();
        btnIzmeni = new javax.swing.JButton();
        BtnObrisi = new javax.swing.JButton();
        btnFilter = new javax.swing.JButton();
        btnResetujFilter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setSize(new java.awt.Dimension(50, 50));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        pnlBack.setBackground(new java.awt.Color(255, 255, 255));
        pnlBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 102), new java.awt.Color(204, 204, 255), new java.awt.Color(204, 204, 255), new java.awt.Color(0, 0, 102)));
        pnlBack.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                pnlBackAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        lblLaborant.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblLaborant.setText("Unesite prezime laboranta:");

        lblPacijent.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblPacijent.setText("Unesite prezime pacijenta:");

        lblInformacije.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        lblInformacije.setText("Izaberite laboranta kojeg zelite da obrišete:");

        txtLaborant.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtPacijent.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jScrollPane1.setBackground(new java.awt.Color(204, 204, 255));

        tblRezultatiPretrage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblRezultatiPretrage);

        btnIzmeni.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnIzmeni.setText("Izmeni");
        btnIzmeni.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102)), null));
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        BtnObrisi.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BtnObrisi.setText("Obriši");
        BtnObrisi.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102)), null));
        BtnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnObrisiActionPerformed(evt);
            }
        });

        btnFilter.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnFilter.setForeground(new java.awt.Color(204, 0, 0));
        btnFilter.setText("Primeni filter");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        btnResetujFilter.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnResetujFilter.setForeground(new java.awt.Color(204, 0, 0));
        btnResetujFilter.setText("Resetuj filter");
        btnResetujFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetujFilterActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Covid-19-Intelligence-Service-logo-RENEE-FINAL-300x110.jpg"))); // NOI18N

        javax.swing.GroupLayout pnlBackLayout = new javax.swing.GroupLayout(pnlBack);
        pnlBack.setLayout(pnlBackLayout);
        pnlBackLayout.setHorizontalGroup(
            pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackLayout.createSequentialGroup()
                        .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE)
                            .addGroup(pnlBackLayout.createSequentialGroup()
                                .addComponent(lblInformacije)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlBackLayout.createSequentialGroup()
                                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPacijent)
                                    .addComponent(lblLaborant))
                                .addGap(18, 18, 18)
                                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtLaborant, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                                    .addComponent(txtPacijent))
                                .addGap(18, 18, 18)
                                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnResetujFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnIzmeni, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                            .addComponent(BtnObrisi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(20, 20, 20))))
        );
        pnlBackLayout.setVerticalGroup(
            pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLaborant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLaborant)
                    .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPacijent)
                    .addComponent(txtPacijent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResetujFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(lblInformacije)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(btnIzmeni, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBackLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)))
                .addGap(81, 81, 81))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlBack, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        if (mod == ModPretraga.PACIJENT) {
            int i = tblRezultatiPretrage.getSelectedRow();
            if (i == -1) {
                JOptionPane.showMessageDialog(this, "Izaberite iz tabele pacijenta koga želite da izmenite");
                return;
            }
            ModelTabelePacijent modelS = (ModelTabelePacijent) tblRezultatiPretrage.getModel();
            List<Pacijent> list = modelS.getList();
            Pacijent p = list.get(i);
            session.Session.getInstance().getUseCaseParams().put("izabranipacijent", p);
            PacijentForma fs = new PacijentForma(this, true, ModForme.IZMENA);
            fs.setVisible(true);
        }
        if (mod == ModPretraga.LABORANT) {
            int i = tblRezultatiPretrage.getSelectedRow();
            if (i == -1) {
                JOptionPane.showMessageDialog(this, "Izaberite iz tabele laboranata koji želite da izmenite");
                return;
            }
            ModelTabeleLaborant modelP = (ModelTabeleLaborant) tblRezultatiPretrage.getModel();
            List<Laborant> list = modelP.getList();
            Laborant l = list.get(i);
            session.Session.getInstance().getUseCaseParams().put("izabraniLaborant", l);
            LaborantForma fc = new LaborantForma(this, true, ModForme.IZMENA);
            fc.setVisible(true);
        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void BtnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnObrisiActionPerformed
        if (mod == ModPretraga.LABORANT) {
            try {
                int i = tblRezultatiPretrage.getSelectedRow();
                if (i == -1) {
                    JOptionPane.showMessageDialog(this, "Izaberite iz tabele laboranata koji zelite da obrišete.");
                    return;
                }
                ModelTabeleLaborant modelP = (ModelTabeleLaborant) tblRezultatiPretrage.getModel();
                List<Laborant> list = modelP.getList();
                Laborant l = list.get(i);
                int option = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da obrišete laboranta: "+l.toString()+"?", "Potvrda", JOptionPane.YES_NO_OPTION);
                if(option == JOptionPane.YES_OPTION){
                Kontroler.getInstance().obrisiLaboranta(l);
                modelP.setList(Kontroler.getInstance().dajSveLaborante());
                modelP.fireTableDataChanged();
                JOptionPane.showMessageDialog(this, "Sistem je obrisao zadatog laboranta.");
                txtLaborant.setText("");
                }else{
                    return;
                }
            } catch (Exception ex) {
                Logger.getLogger(PretragaForma.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Sistem ne može da obriše zadatog laboranta. Ne mozete obrisati laboranta koji ima pacijente!");
            }
        }
        if (mod == ModPretraga.PACIJENT) {
            try {
                int i = tblRezultatiPretrage.getSelectedRow();
                if (i == -1) {
                    JOptionPane.showMessageDialog(this, "Izaberite iz tabele pacijenata koga želite da obrisete");
                    return;
                }
                ModelTabelePacijent modelS = (ModelTabelePacijent) tblRezultatiPretrage.getModel();
                List<Pacijent> list = modelS.getList();
                Pacijent p = list.get(i);
                int option = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da želite da obrišete pacijenta: "+p.toString()+"?", "Potvrda", JOptionPane.YES_NO_OPTION);
                if(option == JOptionPane.YES_OPTION){
                Kontroler.getInstance().obrisiPacijenta(p);
                modelS.setList(Kontroler.getInstance().dajSvePacijente());
                modelS.fireTableDataChanged();
                JOptionPane.showMessageDialog(this, "Sistem je obrisao zadatog pacijenta.");
                txtLaborant.setText("");
                txtPacijent.setText("");
                }else{
                    return;
                }
            } catch (Exception ex) {
                Logger.getLogger(PretragaForma.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Greska pri brisanju pacijenta");
            }
        }
        if (mod == ModPretraga.TEST) {
            try {
                int i = tblRezultatiPretrage.getSelectedRow();
                if (i == -1) {
                    JOptionPane.showMessageDialog(this, "Izaberite iz tabele testova koji želite da obrisete");
                    return;
                }
                ModelTabeleTest modelP = (ModelTabeleTest) tblRezultatiPretrage.getModel();
                List<Test> list = modelP.getList();
                Test t = list.get(i);
                int option = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da želite da obrišete test: "+t.toString()+"?", "Potvrda", JOptionPane.YES_NO_OPTION);
                if(option == JOptionPane.YES_OPTION){
                Kontroler.getInstance().obrisiTest(t);
                modelP.setList(Kontroler.getInstance().dajSveTestove());
                modelP.fireTableDataChanged();
                JOptionPane.showMessageDialog(this, "Sistem je obrisao zadati test.");
                }else{
                    return;
                }
            } catch (Exception ex) {
                Logger.getLogger(PretragaForma.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Sistem ne može da obriše zadati test.");
            }
        }
    }//GEN-LAST:event_BtnObrisiActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained

    }//GEN-LAST:event_formFocusGained

    private void pnlBackAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_pnlBackAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_pnlBackAncestorAdded

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        String ime = "";
        String prezime = "";
        String opis = "";
        
        if (mod == ModPretraga.LABORANT) {
            if (!txtLaborant.getText().isEmpty()) {
                opis = txtLaborant.getText().trim();
            }else{
                JOptionPane.showMessageDialog(this, "Unesite prezime laboranta po kojem želite da pretražujete laboranta.");
                return;
            }
            btnResetujFilter.setVisible(true);
            ModelTabeleLaborant modelP = (ModelTabeleLaborant) tblRezultatiPretrage.getModel();
            List<Laborant> list;
            try {
                list = Kontroler.getInstance().filtrirajLaborante(opis);
                if (list.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Sistem ne može da nađe laboranta po zadatoj vrednosti.");
                    return;
                }
                modelP.setList(list);
                modelP.fireTableDataChanged();
            } catch (Exception ex) {
            }
        }
        if (mod == ModPretraga.PACIJENT) {
        if (mod == ModPretraga.PACIJENT) {
            if (txtLaborant.getText().isEmpty() && txtPacijent.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Unesite ime ili prezime ili oba u zavisnosti po cemu želite da pretražujete pacijente.");
                return;
            }
            btnResetujFilter.setVisible(true);
            ime = txtLaborant.getText().trim();
            prezime = txtPacijent.getText().trim();
            ModelTabelePacijent modelS = (ModelTabelePacijent) tblRezultatiPretrage.getModel();
            try {
                List<Pacijent> list = Kontroler.getInstance().filtrirajPacijente(ime, prezime);
                if (list.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Sistem ne može da nađe pacijenta po zadatoj vrednosti.");
                    return;
                }
                modelS.setList(list);
                modelS.fireTableDataChanged();
            } catch (Exception ex) {
                Logger.getLogger(PretragaForma.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnResetujFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetujFilterActionPerformed
        if (mod == ModPretraga.LABORANT) {
            ModelTabeleLaborant modelP = (ModelTabeleLaborant) tblRezultatiPretrage.getModel();
            
            try {
                List<Laborant> list = Kontroler.getInstance().dajSveLaborante();
                modelP.setList(list);
                modelP.fireTableDataChanged();
                modelP.fireTableDataChanged();
                txtLaborant.setText("");
            } catch (Exception ex) {
            }
        }
        if (mod == ModPretraga.PACIJENT) {
            ModelTabelePacijent modelS = (ModelTabelePacijent) tblRezultatiPretrage.getModel();
            
            try {
                List<Pacijent> list = Kontroler.getInstance().dajSvePacijente();
                modelS.setList(list);
                modelS.fireTableDataChanged();
                txtLaborant.setText("");
                txtPacijent.setText("");
            } catch (Exception ex) {
                Logger.getLogger(PretragaForma.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnResetujFilterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnObrisi;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnResetujFilter;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblInformacije;
    private javax.swing.JLabel lblLaborant;
    private javax.swing.JLabel lblPacijent;
    private javax.swing.JPanel pnlBack;
    private javax.swing.JTable tblRezultatiPretrage;
    private javax.swing.JTextField txtLaborant;
    private javax.swing.JTextField txtPacijent;
    // End of variables declaration//GEN-END:variables

    private void urediFormu(ModPretraga mod) {
        btnResetujFilter.setVisible(false);
        Dimension d = this.getPreferredSize();
        switch (mod) {
            case LABORANT:
                setTitle("Pretraga laboranta");
                lblLaborant.setVisible(true);
                txtLaborant.setVisible(true);
                lblPacijent.setVisible(false);
                txtPacijent.setVisible(false);
                lblLaborant.setText("Unesite prezime laboranta:");
                lblInformacije.setText("Izaberite laboranta kojeh želite da izmenite ili obrišete:");
                 {
                    try {
                        tblRezultatiPretrage.setModel(new ModelTabeleLaborant(Kontroler.getInstance().dajSveLaborante()));
                    } catch (Exception ex) {
                        Logger.getLogger(PretragaForma.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                btnIzmeni.setVisible(true);
                //pnlBack.setSize(630, 530);

                pnlBack.setSize(d);
                break;
            case TEST:

                setTitle("Pretraga testova");
                lblLaborant.setVisible(false);
                txtLaborant.setVisible(false);
                lblPacijent.setVisible(false);
                txtPacijent.setVisible(false);
                btnFilter.setVisible(false);
                lblInformacije.setText("Izaberite test koji želite da obrišete:");
                 {
                    try {
                        tblRezultatiPretrage.setModel(new ModelTabeleTest(Kontroler.getInstance().dajSveTestove()));
                    } catch (Exception ex) {
                        Logger.getLogger(PretragaForma.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                btnIzmeni.setVisible(false);
                //pnlBack.setSize(630, 530);
                pnlBack.setSize(d);

                break;
            case PACIJENT:
                pnlBack.setSize(630, 530);
                setTitle("Pretraga pacijenta");
                lblLaborant.setVisible(true);
                txtLaborant.setVisible(true);
                lblPacijent.setVisible(true);
                txtPacijent.setVisible(true);
                lblLaborant.setText("Unesite ime pacijenta:");
                lblInformacije.setText("Izaberite pacijenta kojeg želite da izmenite ili obrišete:");
                 {
                    try {
                        tblRezultatiPretrage.setModel(new ModelTabelePacijent(Kontroler.getInstance().dajSvePacijente()));
                    } catch (Exception ex) {
                        Logger.getLogger(PretragaForma.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                btnIzmeni.setVisible(true);
                break;
        }
    }

    public void osveziTabelu() {
        if (mod == ModPretraga.LABORANT) {
            ModelTabeleLaborant modelP = (ModelTabeleLaborant) tblRezultatiPretrage.getModel();
            List<Laborant> list;
            try {
                list = Kontroler.getInstance().dajSveLaborante();
                modelP.setList(list);
                modelP.fireTableDataChanged();
                txtLaborant.setText("");
            } catch (Exception ex) {
                Logger.getLogger(PretragaForma.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (mod == ModPretraga.PACIJENT) {
            ModelTabelePacijent modelS = (ModelTabelePacijent) tblRezultatiPretrage.getModel();
            try {
                List<Pacijent> list = Kontroler.getInstance().dajSvePacijente();
                modelS.setList(list);
                modelS.fireTableDataChanged();
                txtLaborant.setText("");
                txtPacijent.setText("");
            } catch (Exception ex) {
                Logger.getLogger(PretragaForma.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
